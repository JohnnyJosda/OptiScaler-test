name: offical (No Signing)

on:
  workflow_dispatch:
  repository_dispatch:
    types: [sync-upstream]

env:
  # Path to solution
  SOLUTION_FILE_PATH: .
  BUILD_CONFIGURATION: Release

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    environment: Build

    steps:
      # Checkout 根据触发来源选择 ref
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.ref || github.ref }}
        submodules: 'true'

    - name: Show trigger info
      run: |
        echo "EVENT_NAME = ${{ github.event_name }}"
        echo "REF = ${{ github.ref }}"
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          echo "Payload ref = ${{ github.event.client_payload.ref }}"
        fi

    - name: Extract Version
      id: get_version
      working-directory: ${{ github.workspace }}
      shell: powershell
      run: |
        # 提取版本脚本，保持原样...

        $resourceFile = ".\OptiScaler\resource.h"
        if (-Not (Test-Path $resourceFile)) {
            Write-Error "File not found: $resourceFile"
            exit 1
        }
        function Get-Version-Component {
            param ([string]$pattern, [string]$replacement)
            $line = Get-Content $resourceFile | Select-String -Pattern $pattern | Select-Object -First 1
            if ($line) { return ($line.Line -replace $replacement).Trim() }
            else { Write-Error "Pattern not found: $pattern"; exit 1}
        }
        $major = Get-Version-Component 'VER_MAJOR_VERSION' '#define VER_MAJOR_VERSION\s+'
        $minor = Get-Version-Component 'VER_MINOR_VERSION' '#define VER_MINOR_VERSION\s+'
        $hotfix = Get-Version-Component 'VER_HOTFIX_VERSION' '#define VER_HOTFIX_VERSION\s+'
        $build = Get-Version-Component 'VER_BUILD_NUMBER' '#define VER_BUILD_NUMBER\s+'
        $version = "v$major.$minor.$hotfix-pre$build"
        $date = Get-Date -Format "yyyyMMdd"
        $outfile = "OptiScaler_${version}_${date}"
        Write-Output "Generated Filename: $outfile"
        "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "filename=$outfile" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Debug version info
      run: |
        echo "Version=${{ steps.get_version.outputs.version }}"
        echo "Filename=${{ steps.get_version.outputs.filename }}"

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Build
      working-directory: ${{ env.GITHUB_WORKSPACE }}
      run: msbuild /m /p:Configuration=${{ env.BUILD_CONFIGURATION }} ${{ env.SOLUTION_FILE_PATH }} /verbosity:minimal

    - name: Compress Artifact
      run: |
        $zip = "${{ steps.get_version.outputs.filename }}.7z"
        7z a -r ${{ github.workspace }}\$zip ${{ github.workspace }}\x64\Release\a\*.*
      continue-on-error: false

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: '${{ steps.get_version.outputs.filename }}'
        path: '${{ github.workspace }}\${{ steps.get_version.outputs.filename }}.7z'
        compression-level: 0
        if-no-files-found: error
